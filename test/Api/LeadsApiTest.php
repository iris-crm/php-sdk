<?php
/**
 * LeadsApiTest
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * IRIS API
 *
 * # Introduction Welcome to IRIS’s API!  The API is organized around `REST`. All requests should be made over `SSL`.  All request and response bodies, including errors, are encoded in `JSON`. # Open API The Open API provides numerous functions to access or to update your CRM lead and merchant data using simple REST calls. ### You can use the Lead API to: - Get a list of leads with field data, notes, appointments, tasks, users and, documents - Get a list of available campaigns, groups, sources, and statuses - Create a new lead, lead note, task, or an appointment - Assign and un-assign users to a lead - Upload or download documents - Update field data, status, campaign, group, and source - Generate an e-signature application and get a list of available apps  ### You can use the Merchant API to: - Get daily merchant deposits and transactions - Get daily chargebacks and retrievals - Get monthly merchant PDF statements - Get a list of merchants by demographics such as processor or group - Get merchant demographic profile information using the merchant id - Make updates to merchant profiles in real-time  # Generate an API token When you send an API request, you will need to include an API token in your request in order to authenticate your account.  The tokens are generated in the CRM by each user individually, and each user may create one or more tokens.  To generate a new API Token, open your user settings page by clicking on your username in the top-right corner, and clicking on the ** Settings ** link or you can use the <a href=\"https://iriscrm.com/settings\">link</a>.  Then open the ** API Settings ** tab, click ** Create New API Token **, configure your token’s settings as needed, and click ** Add New Token **:  <img src='https://iriscrm.com/images/docs/mapi001.png'/>  Your new token will now be created and displayed in a popup window:  <img src='https://iriscrm.com/images/docs/mapi002.png'/>  Once the token is created, it will be shown in the list of available API Tokens where you can copy the token, update its settings, or delete it once it’s no longer needed:  <img src='https://iriscrm.com/images/docs/mapi003.png'/>  ** Note: ** The created tokens will inherit the user’s permissions to assigned merchants, leads, groups and processors. # Using the API Authentication to the API is performed via `X-API-KEY` header. Requests not properly authenticated will return a `401` error code.  `curl -X GET \"https://iriscrm.com/api/v1/merchants/[MID HERE]\" -H \"accept: application/json\" -H \"X-API-KEY: [YOURKEY]\"`  Note that all requests should be made over `SSL`. All request and response bodies, including errors, are encoded in JSON.  The API returns standard HTTP success or error status codes. In case of errors, additional information about what went wrong will be encoded in the response as JSON.  By default, you can make `120` requests per minute. Check the returned HTTP headers of any API request to see your current rate limit status. # Using the Subscription API API Subscriptions are used to send information about an event to a URL and trigger an API call. This is more efficient than doing scheduled API calls.  To create a subscription, use the API Settings page or send a request using the instructions in the Subscriptions section below.  All you need to know is the events you want to be subscribed for and the url to which the updates need to be sent.  To create subscriptions using our GUI open tab ** API Settings ** at ** https://iriscrm.com/settings **:  <img src='https://iriscrm.com/images/docs/new-subscription.png'/> # Authentication Authenticate your account by including your secret key in API requests. Do not share your secret API keys in publicly accessible areas, client-side code, and so forth. Authentication to the API is performed via `X-API-KEY` header. Requests not properly authenticated will return a `401` error code. # Errors Our API returns standard `HTTP` success or error status codes. For errors, we will also include extra information about what went wrong encoded in the response as `JSON`. # Rate limiting You can make `120` requests per minute. Check the returned `HTTP` headers of any API request to see your current rate limit status.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@iriscrm.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.8
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Please update the test case below to test the endpoint.
 */

namespace Swagger\Client;

use Swagger\Client\Configuration;
use Swagger\Client\ApiException;
use Swagger\Client\ObjectSerializer;

/**
 * LeadsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LeadsApiTest extends \PHPUnit_Framework_TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for leadsApplicationsAppIdMappingsGet
     *
     * Get a list of available application field mappings.
     *
     */
    public function testLeadsApplicationsAppIdMappingsGet()
    {
    }

    /**
     * Test case for leadsApplicationsAppIdMappingsMapIdDelete
     *
     * Delete an application field mapping.
     *
     */
    public function testLeadsApplicationsAppIdMappingsMapIdDelete()
    {
    }

    /**
     * Test case for leadsApplicationsAppIdMappingsMapIdGet
     *
     * Get a application field mapping.
     *
     */
    public function testLeadsApplicationsAppIdMappingsMapIdGet()
    {
    }

    /**
     * Test case for leadsApplicationsAppIdMappingsMapIdPatch
     *
     * Update an application field mapping.
     *
     */
    public function testLeadsApplicationsAppIdMappingsMapIdPatch()
    {
    }

    /**
     * Test case for leadsApplicationsAppIdMappingsPost
     *
     * Create a new application field mapping.
     *
     */
    public function testLeadsApplicationsAppIdMappingsPost()
    {
    }

    /**
     * Test case for leadsApplicationsGet
     *
     * Get a list of available applications.
     *
     */
    public function testLeadsApplicationsGet()
    {
    }

    /**
     * Test case for leadsCampaignsGet
     *
     * Get a list of available campaigns.
     *
     */
    public function testLeadsCampaignsGet()
    {
    }

    /**
     * Test case for leadsDynamicFieldsSchemaGet
     *
     * Get a schema of lead fields.
     *
     */
    public function testLeadsDynamicFieldsSchemaGet()
    {
    }

    /**
     * Test case for leadsEmailsTemplatesGet
     *
     * Get list of email templates.
     *
     */
    public function testLeadsEmailsTemplatesGet()
    {
    }

    /**
     * Test case for leadsFieldsFieldIdGet
     *
     * Get a lead field.
     *
     */
    public function testLeadsFieldsFieldIdGet()
    {
    }

    /**
     * Test case for leadsFieldsFieldIdOrderPatch
     *
     * Update a lead field order position.
     *
     */
    public function testLeadsFieldsFieldIdOrderPatch()
    {
    }

    /**
     * Test case for leadsFieldsFieldIdPatch
     *
     * Update a lead field.
     *
     */
    public function testLeadsFieldsFieldIdPatch()
    {
    }

    /**
     * Test case for leadsFieldsGet
     *
     * Get a list of available lead fields.
     *
     */
    public function testLeadsFieldsGet()
    {
    }

    /**
     * Test case for leadsFieldsPost
     *
     * Create a new lead field.
     *
     */
    public function testLeadsFieldsPost()
    {
    }

    /**
     * Test case for leadsFieldsTabsGet
     *
     * Get a list of all lead field tabs.
     *
     */
    public function testLeadsFieldsTabsGet()
    {
    }

    /**
     * Test case for leadsFieldsTabsPost
     *
     * Create a lead field tab.
     *
     */
    public function testLeadsFieldsTabsPost()
    {
    }

    /**
     * Test case for leadsFieldsTabsTabIdGet
     *
     * Get a lead field tab.
     *
     */
    public function testLeadsFieldsTabsTabIdGet()
    {
    }

    /**
     * Test case for leadsFieldsTabsTabIdPatch
     *
     * Update a lead field tab.
     *
     */
    public function testLeadsFieldsTabsTabIdPatch()
    {
    }

    /**
     * Test case for leadsGet
     *
     * Get a list of leads.
     *
     */
    public function testLeadsGet()
    {
    }

    /**
     * Test case for leadsGroupsGet
     *
     * Get a list of available groups.
     *
     */
    public function testLeadsGroupsGet()
    {
    }

    /**
     * Test case for leadsLeadIdActivityCampaignGet
     *
     * Get a list of all lead campaign activity.
     *
     */
    public function testLeadsLeadIdActivityCampaignGet()
    {
    }

    /**
     * Test case for leadsLeadIdActivityDeletionGet
     *
     * Get a list of all lead deletion activity.
     *
     */
    public function testLeadsLeadIdActivityDeletionGet()
    {
    }

    /**
     * Test case for leadsLeadIdActivityDuplicatesGet
     *
     * Get a list of all lead duplicate activity.
     *
     */
    public function testLeadsLeadIdActivityDuplicatesGet()
    {
    }

    /**
     * Test case for leadsLeadIdActivityLinksGet
     *
     * Get a list of all lead links activity.
     *
     */
    public function testLeadsLeadIdActivityLinksGet()
    {
    }

    /**
     * Test case for leadsLeadIdActivitySourceGet
     *
     * Get a list of all lead source activity.
     *
     */
    public function testLeadsLeadIdActivitySourceGet()
    {
    }

    /**
     * Test case for leadsLeadIdActivityStatusGet
     *
     * Get a list of all lead status activity.
     *
     */
    public function testLeadsLeadIdActivityStatusGet()
    {
    }

    /**
     * Test case for leadsLeadIdApplicationsApplicationIdPopulatePost
     *
     * Populate PDF Document.
     *
     */
    public function testLeadsLeadIdApplicationsApplicationIdPopulatePost()
    {
    }

    /**
     * Test case for leadsLeadIdAppointmentsGet
     *
     * Get lead appointments.
     *
     */
    public function testLeadsLeadIdAppointmentsGet()
    {
    }

    /**
     * Test case for leadsLeadIdAppointmentsPost
     *
     * Create a lead appointment.
     *
     */
    public function testLeadsLeadIdAppointmentsPost()
    {
    }

    /**
     * Test case for leadsLeadIdDocumentsDocumentIdGet
     *
     * Download a document.
     *
     */
    public function testLeadsLeadIdDocumentsDocumentIdGet()
    {
    }

    /**
     * Test case for leadsLeadIdDocumentsGet
     *
     * Get a list of available documents.
     *
     */
    public function testLeadsLeadIdDocumentsGet()
    {
    }

    /**
     * Test case for leadsLeadIdDocumentsPost
     *
     * Upload a document.
     *
     */
    public function testLeadsLeadIdDocumentsPost()
    {
    }

    /**
     * Test case for leadsLeadIdEmailsTemplateIdPost
     *
     * Send an email to lead with template.
     *
     */
    public function testLeadsLeadIdEmailsTemplateIdPost()
    {
    }

    /**
     * Test case for leadsLeadIdGet
     *
     * Get detailed lead information.
     *
     */
    public function testLeadsLeadIdGet()
    {
    }

    /**
     * Test case for leadsLeadIdMailboxEmailIdAttachmentAttachmentIdGet
     *
     * Download a mailbox email attachment.
     *
     */
    public function testLeadsLeadIdMailboxEmailIdAttachmentAttachmentIdGet()
    {
    }

    /**
     * Test case for leadsLeadIdNotesGet
     *
     * Get lead notes.
     *
     */
    public function testLeadsLeadIdNotesGet()
    {
    }

    /**
     * Test case for leadsLeadIdNotesPost
     *
     * Create a lead note.
     *
     */
    public function testLeadsLeadIdNotesPost()
    {
    }

    /**
     * Test case for leadsLeadIdPatch
     *
     * Update a lead.
     *
     */
    public function testLeadsLeadIdPatch()
    {
    }

    /**
     * Test case for leadsLeadIdSignaturesApplicationIdGeneratePost
     *
     * Generate an e-signature document.
     *
     */
    public function testLeadsLeadIdSignaturesApplicationIdGeneratePost()
    {
    }

    /**
     * Test case for leadsLeadIdSignaturesApplicationIdSendPost
     *
     * Send an e-signature document.
     *
     */
    public function testLeadsLeadIdSignaturesApplicationIdSendPost()
    {
    }

    /**
     * Test case for leadsLeadIdSignaturesGet
     *
     * Get a list of all lead e-signatures documents.
     *
     */
    public function testLeadsLeadIdSignaturesGet()
    {
    }

    /**
     * Test case for leadsLeadIdSmsTemplateIdPost
     *
     * Send an sms to lead with selected sms template.
     *
     */
    public function testLeadsLeadIdSmsTemplateIdPost()
    {
    }

    /**
     * Test case for leadsLeadIdTasksGet
     *
     * Get lead tasks.
     *
     */
    public function testLeadsLeadIdTasksGet()
    {
    }

    /**
     * Test case for leadsLeadIdTasksPost
     *
     * Create a lead task.
     *
     */
    public function testLeadsLeadIdTasksPost()
    {
    }

    /**
     * Test case for leadsLeadIdUsersGet
     *
     * Get a list of assigned users.
     *
     */
    public function testLeadsLeadIdUsersGet()
    {
    }

    /**
     * Test case for leadsLeadIdUsersPost
     *
     * Assign a user.
     *
     */
    public function testLeadsLeadIdUsersPost()
    {
    }

    /**
     * Test case for leadsLeadIdUsersUserIdDelete
     *
     * Unassign a user from a lead.
     *
     */
    public function testLeadsLeadIdUsersUserIdDelete()
    {
    }

    /**
     * Test case for leadsPost
     *
     * Create a lead.
     *
     */
    public function testLeadsPost()
    {
    }

    /**
     * Test case for leadsSignaturesApplicationIdDownloadGet
     *
     * Download an e-signature document.
     *
     */
    public function testLeadsSignaturesApplicationIdDownloadGet()
    {
    }

    /**
     * Test case for leadsSourcesGet
     *
     * Get a list of available sources.
     *
     */
    public function testLeadsSourcesGet()
    {
    }

    /**
     * Test case for leadsStatusesGet
     *
     * Get a list of available statuses.
     *
     */
    public function testLeadsStatusesGet()
    {
    }

    /**
     * Test case for leadsUsersGet
     *
     * Get a list of available users.
     *
     */
    public function testLeadsUsersGet()
    {
    }
}
